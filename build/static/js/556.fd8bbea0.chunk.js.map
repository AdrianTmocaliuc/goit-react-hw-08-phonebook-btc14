{"version":3,"file":"static/js/556.fd8bbea0.chunk.js","mappings":"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","sources":["webpack://homWork-08-phonebook-login/./src/components/utilities/GeneralForm/GeneralForm.module.scss?8161","components/utilities/GeneralForm/GeneralFormReducer.js","components/utilities/GeneralForm/GeneralForm.jsx","Pages/Register/Register.jsx","webpack://homWork-08-phonebook-login/./src/components/utilities/Button/Button.module.scss?da61","components/utilities/Button/Button.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"GeneralForm_form__HYrAH\"};","export const initialState = {\r\n  name: \"\",\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\nexport const initialTypes = {\r\n  name: \"name\",\r\n  email: \"email\",\r\n  password: \"password\",\r\n  reset: \"reset\",\r\n};\r\n\r\nexport function reducer(state, action) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case initialTypes.name:\r\n      return { ...state, name: payload };\r\n    case initialTypes.email:\r\n      return { ...state, email: payload };\r\n    case initialTypes.password:\r\n      return { ...state, password: payload };\r\n    case initialTypes.reset:\r\n      return initialState;\r\n\r\n    default:\r\n      break;\r\n  }\r\n}\r\n","import { useReducer, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { TailSpin } from \"react-loader-spinner\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport s from \"./GeneralForm.module.scss\";\r\nimport Button from \"components/utilities/Button/Button\";\r\nimport { initialState, reducer } from \"./GeneralFormReducer\";\r\nimport { RegisterUser } from \"redux/authorization/authorizationAsyncThunk\";\r\n\r\nfunction GeneralForm({ buttonTitle }) {\r\n  const dispatch = useDispatch();\r\n  const { authLoader } = useSelector((state) => state.authorization);\r\n  console.log(\"authLoader\", authLoader);\r\n\r\n  const [state, dispatchState] = useReducer(reducer, initialState);\r\n  const { name, email, password } = state;\r\n\r\n  const onChangeInput = ({ target }) => {\r\n    const { name, value } = target;\r\n    dispatchState({ type: name, payload: value });\r\n  };\r\n\r\n  const onSubmitForm = (e) => {\r\n    e.preventDefault();\r\n\r\n    dispatch(RegisterUser(state));\r\n\r\n    dispatchState({ type: \"reset\" });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className={s.form} onSubmit={onSubmitForm}>\r\n        <label>\r\n          <h3>Name</h3>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            required\r\n            onChange={onChangeInput}\r\n          />\r\n        </label>\r\n        <label>\r\n          <h3>Email</h3>\r\n          <input\r\n            type=\"tel\"\r\n            name=\"email\"\r\n            value={email}\r\n            title=\"Phone phone must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n            onChange={onChangeInput}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          <h3>Password</h3>\r\n          <input\r\n            type=\"tel\"\r\n            name=\"password\"\r\n            value={password}\r\n            title=\"Phone phone must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n            onChange={onChangeInput}\r\n          />\r\n        </label>\r\n        {authLoader ? (\r\n          <TailSpin height=\"27\" width=\"27\" color=\"red\" ariaLabel=\"loading\" />\r\n        ) : (\r\n          <Button title={buttonTitle} type=\"submit\" />\r\n        )}\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GeneralForm;\r\n\r\nGeneralForm.propTypes = {\r\n  buttonTitle: PropTypes.string,\r\n};\r\n","import { RegisterUser } from \"redux/authorization/authorizationAsyncThunk\";\r\nimport GeneralForm from \"components/utilities/GeneralForm/GeneralForm\";\r\n\r\nconst Register = () => {\r\n  return (\r\n    <>\r\n      <GeneralForm buttonTitle=\"Register\" />\r\n    </>\r\n  );\r\n};\r\n\r\n// const OldRegister = () => {\r\n//   const dispatch = useDispatch();\r\n\r\n//   const [state, dispatchState] = useReducer(reducer, initialState);\r\n\r\n//   const { name, email, password } = state;\r\n\r\n//   const [registerLoader, setRegisterLoader] = useState(false);\r\n\r\n//   const onChangeInput = ({ target }) => {\r\n//     const { name, value } = target;\r\n//     dispatchState({ type: name, payload: value });\r\n//   };\r\n\r\n//   const onSubmitForm = (e) => {\r\n//     e.preventDefault();\r\n//     // console.log(\"state\", state);\r\n\r\n//     dispatch(RegisterUser(state));\r\n\r\n//     dispatchState({ type: \"reset\" });\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <form className={s.form} onSubmit={onSubmitForm}>\r\n//         <label>\r\n//           <h3>Name</h3>\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             value={name}\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n//             required\r\n//             onChange={onChangeInput}\r\n//           />\r\n//         </label>\r\n//         <label>\r\n//           <h3>Email</h3>\r\n//           <input\r\n//             type=\"tel\"\r\n//             name=\"email\"\r\n//             value={email}\r\n//             title=\"Phone phone must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n//             required\r\n//             onChange={onChangeInput}\r\n//           />\r\n//         </label>\r\n//         <label>\r\n//           <h3>Password</h3>\r\n//           <input\r\n//             type=\"tel\"\r\n//             name=\"password\"\r\n//             value={password}\r\n//             title=\"Phone phone must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n//             required\r\n//             onChange={onChangeInput}\r\n//           />\r\n//         </label>\r\n//         {registerLoader ? (\r\n//           <TailSpin height=\"27\" width=\"27\" color=\"red\" ariaLabel=\"loading\" />\r\n//         ) : (\r\n//           <Button title=\"Register\" />\r\n//         )}\r\n//       </form>\r\n//     </>\r\n//   );\r\n// };\r\n\r\nexport default Register;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__9lDDD\"};","import { Component } from \"react\";\r\nimport s from \"./Button.module.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { TailSpin } from \"react-loader-spinner\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Button extends Component {\r\n  render() {\r\n    const { title, id, onClick, selected, type = \"button\" } = this.props;\r\n    const checkedButton =\r\n      this?.props?.loading && selected === id && title === \"Delete\";\r\n    return (\r\n      <>\r\n        <button\r\n          disabled={checkedButton ? true : false}\r\n          className={s.button}\r\n          id={id}\r\n          onClick={onClick}\r\n          type={type}\r\n        >\r\n          {checkedButton ? (\r\n            <TailSpin height=\"15\" width=\"15\" color=\"red\" ariaLabel=\"loading\" />\r\n          ) : (\r\n            title\r\n          )}\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nButton.propTypes = {\r\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  onClick: PropTypes.func,\r\n  id: PropTypes.string,\r\n  selected: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { loading: state.items.removeLoader };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Button);\r\n"],"names":["initialState","name","email","password","initialTypes","reducer","state","action","type","payload","buttonTitle","dispatch","useDispatch","useSelector","authorization","authLoader","console","log","useReducer","dispatchState","onChangeInput","target","value","className","s","onSubmit","e","preventDefault","RegisterUser","pattern","title","required","onChange","height","width","color","ariaLabel","Button","this","props","id","onClick","selected","checkedButton","loading","disabled","Component","connect","items","removeLoader"],"sourceRoot":""}